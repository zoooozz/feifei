{"remainingRequest":"/usr/local/var/www/feifei/node_modules/vue-loader/lib/index.js??vue-loader-options!/usr/local/var/www/feifei/src/components/Barrage.vue?vue&type=script&lang=js&","dependencies":[{"path":"/usr/local/var/www/feifei/src/components/Barrage.vue","mtime":1630759194788},{"path":"/usr/local/var/www/feifei/node_modules/cache-loader/dist/cjs.js","mtime":1630734351377},{"path":"/usr/local/var/www/feifei/node_modules/babel-loader/lib/index.js","mtime":1630734322281},{"path":"/usr/local/var/www/feifei/node_modules/cache-loader/dist/cjs.js","mtime":1630734351377},{"path":"/usr/local/var/www/feifei/node_modules/vue-loader/lib/index.js","mtime":1630734352656}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport data from '../mock/data'\n\nexport default {\n  props: ['wish', 'canStart'],\n  data(){\n    return {\n      barrages: data.barrages,\n      animationStyle:'',\n      initialOffset: 0\n    }\n  },\n  computed: {\n    codeInStyleTag: function () {\n      return `<style>${this.animationStyle}</style>`\n    }\n  },\n  watch: {\n    canStart: function (val) {\n      if (val===true) {\n        this.barrageAnimationStart()\n      }\n    }\n  },\n  methods: {\n    // 弹幕动画开始\n    barrageAnimationStart() {\n      let barrageWidth = this.getWidth(this.$refs.barrage)\n      let barrageWidthGroup = [\n            this.getWidth(this.$refs.barrageFirst),\n            this.getWidth(this.$refs.barrageSecond),\n            this.getWidth(this.$refs.barrageThird),\n            this.getWidth(this.$refs.barrageFourth)\n          ]\n      this.initialOffset = barrageWidth + 15\n      barrageWidthGroup.map((item,index) => {\n        this.animationStyle += `\n          .barrage-${index}{\n            animation: barrage-${index} ${item/40}s linear infinite;\n            -webkit-animation: barrage-${index} ${item/40}s linear infinite;\n          }\n          @keyframes barrage-${index} {\n            from {\n              transform:translate3d(${barrageWidth+15}px,0,0);\n              -webkit-transform:translate3d(${barrageWidth+15}px,0,0);\n            }\n            to {\n              transform:translate3d(-${item+15}px,0,0);\n              -webkit-transform:translate3d(-${item+15}px,0,0);\n            }\n          }`\n      })\n    },\n    getWidth(ref) {\n      return window.getComputedStyle(ref,null).width.replace('px','') - 0\n    },\n    filterBarrage(barrages, remainder) {\n      if(barrages){\n        return barrages.filter((barrage, index) => {\n          if(index%4 === remainder){\n            return barrage\n          }\n        })\n      }\n    }\n  }\n}\n",{"version":3,"sources":["Barrage.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAqBA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Barrage.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"wedding-barrage\" ref=\"barrage\" :style=\"{opacity: canStart ? 1 : 0}\">\n    <div v-html=\"codeInStyleTag\"></div>\n    <p class=\"code barrage-0\" ref=\"barrageFirst\" :style=\"{transform:'translate('+initialOffset+'px)',top:'10px'}\">\n      <span class=\"mine\">{{ wish }}</span>\n      <span v-for=\"(item, index) in filterBarrage(barrages, 0)\" :key=\"index\">{{ item }}</span>\n    </p>\n    <p class=\"code barrage-1\" ref=\"barrageSecond\" :style=\"{transform:'translate('+initialOffset+'px)',top:'40px'}\">\n      <span v-for=\"(item, index) in filterBarrage(barrages, 1)\" :key=\"index\">{{ item }}</span>\n    </p>\n    <p class=\"code barrage-2\" ref=\"barrageThird\" :style=\"{transform:'translate('+initialOffset+'px)',top:'70px'}\">\n      <span v-for=\"(item, index) in filterBarrage(barrages, 2)\" :key=\"index\">{{ item }}</span>\n    </p>\n    <p class=\"code barrage-3\" ref=\"barrageFourth\" :style=\"{transform:'translate('+initialOffset+'px)',top:'100px'}\">\n      <span v-for=\"(item, index) in filterBarrage(barrages, 3)\" :key=\"index\">{{ item }}</span>\n    </p>\n    <div class=\"barrage-space\"></div>\n  </div>\n</template>\n\n<script>\n  import data from '../mock/data'\n\n  export default {\n    props: ['wish', 'canStart'],\n    data(){\n      return {\n        barrages: data.barrages,\n        animationStyle:'',\n        initialOffset: 0\n      }\n    },\n    computed: {\n      codeInStyleTag: function () {\n        return `<style>${this.animationStyle}</style>`\n      }\n    },\n    watch: {\n      canStart: function (val) {\n        if (val===true) {\n          this.barrageAnimationStart()\n        }\n      }\n    },\n    methods: {\n      // 弹幕动画开始\n      barrageAnimationStart() {\n        let barrageWidth = this.getWidth(this.$refs.barrage)\n        let barrageWidthGroup = [\n              this.getWidth(this.$refs.barrageFirst),\n              this.getWidth(this.$refs.barrageSecond),\n              this.getWidth(this.$refs.barrageThird),\n              this.getWidth(this.$refs.barrageFourth)\n            ]\n        this.initialOffset = barrageWidth + 15\n        barrageWidthGroup.map((item,index) => {\n          this.animationStyle += `\n            .barrage-${index}{\n              animation: barrage-${index} ${item/40}s linear infinite;\n              -webkit-animation: barrage-${index} ${item/40}s linear infinite;\n            }\n            @keyframes barrage-${index} {\n              from {\n                transform:translate3d(${barrageWidth+15}px,0,0);\n                -webkit-transform:translate3d(${barrageWidth+15}px,0,0);\n              }\n              to {\n                transform:translate3d(-${item+15}px,0,0);\n                -webkit-transform:translate3d(-${item+15}px,0,0);\n              }\n            }`\n        })\n      },\n      getWidth(ref) {\n        return window.getComputedStyle(ref,null).width.replace('px','') - 0\n      },\n      filterBarrage(barrages, remainder) {\n        if(barrages){\n          return barrages.filter((barrage, index) => {\n            if(index%4 === remainder){\n              return barrage\n            }\n          })\n        }\n      }\n    }\n  }\n</script>\n\n<style lang=\"less\">\n  .wedding-barrage{\n    position: relative;\n    p{\n      position: absolute;\n      padding: 5px 0;\n      white-space:nowrap;\n      transition: all 0.6s linear;\n      -webkit-transition: all 0.6s linear;\n      span{\n        padding: 0 15px;\n        &.mine{\n          color: #e6db74;\n          padding: 4px 6px;\n          border: 1px solid #e6db74;\n        }\n      }\n    }\n    .barrage-space{\n      height: 180px;\n    }\n  }\n</style>"]}]}