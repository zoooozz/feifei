{"remainingRequest":"/usr/local/var/www/feifei/node_modules/vue-loader/lib/index.js??vue-loader-options!/usr/local/var/www/feifei/src/components/Executions.vue?vue&type=script&lang=js&","dependencies":[{"path":"/usr/local/var/www/feifei/src/components/Executions.vue","mtime":1630759194790},{"path":"/usr/local/var/www/feifei/node_modules/cache-loader/dist/cjs.js","mtime":1630734351377},{"path":"/usr/local/var/www/feifei/node_modules/babel-loader/lib/index.js","mtime":1630734322281},{"path":"/usr/local/var/www/feifei/node_modules/cache-loader/dist/cjs.js","mtime":1630734351377},{"path":"/usr/local/var/www/feifei/node_modules/vue-loader/lib/index.js","mtime":1630734352656}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport data from '../mock/data'\nexport default {\n  name: 'Executions',\n  props: ['canExecute'],\n  data () {\n    return {\n      executions: data.executions,\n      isProcessed: false,\n      isFinished: false,\n      progressBarText: '--------------------------',\n      endExecution: {\n        name:'打开中...',\n        time: '',\n        visible: false\n      }\n    }\n  },\n  computed: {\n    percentage () {\n      const hashL = this.progressBarText.split('').filter(c => c==='#').length\n      const l = this.progressBarText.length\n      return Math.floor(hashL*100/l)\n    }\n  },\n  watch: {\n    canExecute: function (val) {\n      if (val===true) {\n        this.runExecutions()\n      }\n    }\n  },\n  updated() {\n    this.$emit('onUpdating')\n  },\n  methods: {\n    // 逐条执行命令\n    runExecutions: async function () {\n      for (const execution of this.executions) {\n        await this.progressivelyRun(execution)\n      }\n      // 执行完命令，开始显示进度条\n      await this.successProcessing(1000)\n      // 执行最后一条命令\n      await this.progressivelyRun(this.endExecution)\n        .then(() => {\n          setTimeout(() => {\n            this.isFinished = true\n            this.$emit('onFinish')\n          }, 500)\n        })\n    },\n    // 执行一条命令\n    progressivelyRun(execution, customDuration) {\n      return new Promise((resolve) => {\n        let now = new Date(),\n            duration = customDuration ? customDuration : Math.random()*50+250,\n            showCode = () => {\n              execution.time = now.toLocaleTimeString()\n              execution.duration = execution.duration !== undefined ? duration.toFixed(2) : undefined\n              execution.visible = true\n              resolve()\n            }\n        setTimeout(showCode, duration)\n      })\n    },\n    // 显示进度条\n    successProcessing(duration){\n      return new Promise((resolve) => {\n        let start = null, progressing, progressingCount = 0\n        this.isProcessed = true\n        let step = (timestamp) => {\n            let timeGap\n            if (start === null) {\n              start = timestamp\n            }\n            timeGap = timestamp - start\n            if (progressingCount%3 === 0) {\n              this.progressBarText = this.progressBarText.replace('-', '#')\n            }\n            progressingCount++\n            if (timeGap < duration) {\n              progressing = requestAnimationFrame(step)\n            } else {\n              resolve()\n              this.progressBarText = this.progressBarText.replace(/-/g, '#')\n              cancelAnimationFrame(progressing)\n            }\n          }\n        progressing = requestAnimationFrame(step)\n      });\n    }\n  }\n}\n",{"version":3,"sources":["Executions.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAyBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Executions.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"executions\">\n    <!--执行命令-->\n    <p class=\"code\" v-for=\"(execution, index) in executions\" :key=\"index\" v-show=\"execution.visible\">\n      <span class=\"addon\">~</span>\n      [<span class=\"time\">{{ execution.time }}</span>]\n      <span class=\"task\">{{ execution.name }}</span>\n      <span class=\"duration\" v-if=\"execution.duration!==undefined\">{{ execution.duration }} ms</span>\n    </p>\n    <!--进度条-->\n    <p class=\"code\" v-show=\"isProcessed\">\n      <span class=\"addon\">~</span>\n      {{ progressBarText }}\n      <span class=\"percentage\">{{ percentage }}%</span>\n    </p>\n    <!--执行命令-->\n    <p class=\"code\" v-show=\"endExecution.visible\">\n      <span class=\"addon\">~</span>\n      [<span class=\"time\">{{ endExecution.time }}</span>]\n      <span class=\"task\">{{ endExecution.name }}</span>\n    </p>\n  </div>\n</template>\n\n<script>\n  import data from '../mock/data'\n  export default {\n    name: 'Executions',\n    props: ['canExecute'],\n    data () {\n      return {\n        executions: data.executions,\n        isProcessed: false,\n        isFinished: false,\n        progressBarText: '--------------------------',\n        endExecution: {\n          name:'打开中...',\n          time: '',\n          visible: false\n        }\n      }\n    },\n    computed: {\n      percentage () {\n        const hashL = this.progressBarText.split('').filter(c => c==='#').length\n        const l = this.progressBarText.length\n        return Math.floor(hashL*100/l)\n      }\n    },\n    watch: {\n      canExecute: function (val) {\n        if (val===true) {\n          this.runExecutions()\n        }\n      }\n    },\n    updated() {\n      this.$emit('onUpdating')\n    },\n    methods: {\n      // 逐条执行命令\n      runExecutions: async function () {\n        for (const execution of this.executions) {\n          await this.progressivelyRun(execution)\n        }\n        // 执行完命令，开始显示进度条\n        await this.successProcessing(1000)\n        // 执行最后一条命令\n        await this.progressivelyRun(this.endExecution)\n          .then(() => {\n            setTimeout(() => {\n              this.isFinished = true\n              this.$emit('onFinish')\n            }, 500)\n          })\n      },\n      // 执行一条命令\n      progressivelyRun(execution, customDuration) {\n        return new Promise((resolve) => {\n          let now = new Date(),\n              duration = customDuration ? customDuration : Math.random()*50+250,\n              showCode = () => {\n                execution.time = now.toLocaleTimeString()\n                execution.duration = execution.duration !== undefined ? duration.toFixed(2) : undefined\n                execution.visible = true\n                resolve()\n              }\n          setTimeout(showCode, duration)\n        })\n      },\n      // 显示进度条\n      successProcessing(duration){\n        return new Promise((resolve) => {\n          let start = null, progressing, progressingCount = 0\n          this.isProcessed = true\n          let step = (timestamp) => {\n              let timeGap\n              if (start === null) {\n                start = timestamp\n              }\n              timeGap = timestamp - start\n              if (progressingCount%3 === 0) {\n                this.progressBarText = this.progressBarText.replace('-', '#')\n              }\n              progressingCount++\n              if (timeGap < duration) {\n                progressing = requestAnimationFrame(step)\n              } else {\n                resolve()\n                this.progressBarText = this.progressBarText.replace(/-/g, '#')\n                cancelAnimationFrame(progressing)\n              }\n            }\n          progressing = requestAnimationFrame(step)\n        });\n      }\n    }\n  }\n</script>\n\n<style lang=\"less\">\n  .executions{\n    .addon{\n      color: #68FCFB;\n    }\n    .time{ color: #666; }\n    .task{ color: #009AB2; }\n    .duration{\n      margin-left: 10px;\n      color: #BF36B7;\n    }\n  }\n</style>"]}]}